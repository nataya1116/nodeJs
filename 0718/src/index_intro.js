// node.js
// 자바스크립트 언어로 데이터베이스에 연결에 서버로 요청을 보내는 기능을 하는 백엔드 언어이다. node.js 크롬 V8 자바스크립트 엔지능로 빌드된 자바스크립트 런타임이다. node.js는 웹서버 라이브러리가 있지만 웹서버는 아니다. 자바스크립트로 브라우저가 아닌 서버에서 동작하도록 도와주는 런타임 플랫폼이다.

// 2009년 라이언 달 이라는 개발자가 처음 만들었고 지금까지도 활발하게 업데이트 되고 있다. 

// node.js 특징 3개
// 1. 자바스크립트로 백엔드 서버 로직을 개발할 수 있다.(장점)
// 2. 구글에서 개발한 js엔진을 쓰기 때문에 속도가 빠르다.(인터프리터 방식)
// 3. 논 블로킹 방식 node.js의 모든 API는 비동기적으로 작동하며 호출 후 다른 API를 바로 불러올 수 있다. 한 번 불러왔던 API를 요청하면 이벤트 루프가 확인해서 동작

// node.js가 만들어진 배경
// npm(node pakage maneger)을 이용하여 방대한 오픈소스 생태계를 구축하였다. 리액트, 익스프레스, 코아 등의 라이브러리를 npm을 통해서 사용할 수 있다. 일부 특수한 기능을 제외하고는 기존에 만들어진 라이브러리를 사용할 수 있어 빠르게 개발 할 수 있다는 장점이 있다.

// 모듈
// 패키지는 클래스의 묶음, 모듈은 패키지의 묶음

// require를 이용해서 라이브러리를 호출한다.

// http는 node.js 기본 모듈 설치가 필요없다.
// require(경로나 이름)
const http = require("http");

// http 객체 안의 createServer함수를 사용해서 서버를 만듦
// 서버가 되는 부분을 반환 받을 수 있다.
const server = http.createServer((req, res)=>{
    // req 요청값
    // 404, 500 이런 오류 들
    req.statusCode = 200;
    // 100번대 : 정보응답
    // 200번대 : 성공응답
    // 300번대 : 리다이렉션 메세지, 요청한  url이 변경되었을때
    // 400번대 : 클라이언트 상의 오류, 클라이언트에 오류가 있을때
    // 500번대 : 서버 오류 응답, 서버에 오류가 있을때
    
    // html에 문자열을 입력해주는 함수(html 요소도 가능)
    res.write('123');

    // 종료 함수 write와 마찬가지로 html에 문자열을 입력해준다.
    res.end('456');
});

const PORT = 3000;

//  server 객체에 listen()함수를         , 사용하면 서버가 실행된다.
//            포트번호, 호스트명, 백로그, 콜백함수
server.listen(PORT, ()=>{
    console.log(`port : ${PORT}`);
});
// server 객체의 준비가 되면 listen함수로 해당 포트에 서버를 대기시키고 클라이언트에서 요청이 오면 서버에서 처리할 수 있다.

// 코드 샌드박스, glitch

